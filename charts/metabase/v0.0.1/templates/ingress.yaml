{{- if .Values.ingress.enabled -}}
{{- $serviceName := include "metabase.fullname" . -}}
{{- $servicePort := .Values.service.externalPort -}}
{{- $ingressPath := .Values.ingress.path -}}
{{- if semverCompare ">=1.19-0" .Capabilities.KubeVersion.GitVersion -}}
{{- $ingressPathType := .Values.ingress.pathType -}}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ template "metabase.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "metabase.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  {{- range $key, $value := .Values.ingress.labels }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
  annotations:
    {{- range $key, $value := .Values.ingress.annotations }}
      {{ $key }}: {{ $value | quote }}
    {{- end }}
spec:
  {{- if .Values.ingress.className }}
  ingressClassName: {{ .Values.ingress.className }}
  {{- end }}
  rules:
    {{- if .Values.metabase }}
    - host: "{{.Values.metabase}}.{{.Values.ingress.cloudMainDomain}}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: metabase-http
                port:
                  number: 80

    {{- end -}}
  {{- if .Values.ingress.tls }}
  tls:
{{ toYaml .Values.ingress.tls | indent 4 }}
  {{- end -}}
{{- else -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "metabase.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "metabase.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  {{- range $key, $value := .Values.ingress.labels }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
  annotations:
    {{- range $key, $value := .Values.ingress.annotations }}
      {{ $key }}: {{ $value | quote }}
    {{- end }}
spec:
  rules:
    {{- range $host := .Values.ingress.hosts }}
    - host: {{ $host }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $serviceName }}
              servicePort: {{ $servicePort }}
    {{- end -}}
  {{- if .Values.ingress.tls }}
  tls:
{{ toYaml .Values.ingress.tls | indent 4 }}
  {{- end -}}
{{- end }}
{{- end -}}
---
apiVersion: cloud.google.com/v1
kind: backendconfig
metadata:
  name: {{ include "metabase.fullname" . }}-backend-config
# https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-features#configuring_ingress_features_through_backendconfig_parameters
spec:
  # kubectl explain backendconfig.spec
  connectionDraining:
    drainingTimeoutSec: 600
  # healthCheck:
  #   checkIntervalSec: interval
  #   timeoutSec: timeout
  #   healthyThreshold: health-threshold
  #   unhealthyThreshold: unhealthy-threshold
  #   type: protocol
  #   requestPath: path
  #   port: port
  cdn:
    enabled: true
    cachePolicy:
      # Cloud CDN is enabled for this Ingress backend.
      # requests to different hosts are cached separately.
      includeHost: true
      # HTTP and HTTPS requests are cached separately.
      includeProtocol: false
      # If set to true, query string parameters are included in the cache key according to queryStringBlacklist or queryStringWhitelist. If neither is set, the entire query string is included. If set to false, the entire query string is excluded from the cache key.
      includeQueryString: includeQueryString
      # Specify a string array with the names of query string parameters to exclude from cache keys.
      # All other parameters are included. You can specify queryStringBlacklist or queryStringWhitelist, but not both.
      # queryStringBlacklist:
      # Specify a string array with the names of query string parameters to include in cache keys. All other parameters are excluded. You can queryStringBlacklist or queryStringWhitelist, but not both.
      queryStringWhitelist: queryStringWhitelist
  # logging:
  #   enable: true
  #   sampleRate: 0.5
  sessionAffinity:
    affinityType: "GENERATED_COOKIE"
    affinityCookieTtlSec: 600
  # customRequestHeaders:
  #   headers:
  #   - "X-Client-Region:{client_region}"
  #   - "X-Client-City:{client_city}"
  #   - "X-Client-CityLatLong:{client_city_lat_long}"
