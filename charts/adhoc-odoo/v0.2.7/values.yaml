# Default values for adhoc-odoo.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: adhoc/odoo-adhoc
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "17.0"
  pullSecret: "regcred"

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# https://v1-18.docs.kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  tcpSocket:
    port: 8069
  initialDelaySeconds: 10
  periodSeconds: 10
  failureThreshold: 20
  # Must be 1 for liveness and startup
  #successThreshold: 1
readinessProbe:
  tcpSocket:
    port: 8069
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 2

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  # adhoc-letsencrypt-prod-issuer
  # adhoc-letsencrypt-staging-issuer
  issuer: adhoc-letsencrypt-prod-issuer
  enableHttps: true
  # AltHost
  hosts: ""
  cloudMainDomain: adhoc.ar

  # True for Google Ingress or false for internal NGINX Ingress
  useGoogleCloudExternalLB: false
  configurationSnippet:
    enabled: false
    snippet: |
      add_header Referrer-Policy "no-referrer";
resources:
  limits:
    cpu: 3000m
    memory: 4096Mi
  requests:
    cpu: 30m
    memory: 250Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 90

nodeSelector: {}
tolerations: {}

odoo:
  # Database parameters
  pg:
    user: ""
    pass: ""
    host: "adhoc-pg.adhoc-pg.svc.cluster.local"
    port: 5432
    db: "adhoc-pg"
  # Base Config
  basic:
    adminPass: "admin"
    dbFilter: "false"
    wideModules: "base,web,server_mode,saas_client"
    logLevel: "info"
    aerooHost: ""
    emailFrom: "notifications@adhoc.nubeadhoc.com"
    withoutDemo: true
  # Performance Config
  saas:
    mode: false
    autoinstallEnabled: "server_mode"
    autoinstallDisabled: "snailmail,account_edi_facturx"
    installDisabled: "l10n_es"
  performance:
    workers: 0
    maxCronTh: 1
    maxDbConn: 96
    dbTemplate: "template0"
    maxMemHard: "4777721600"
    maxMemSoft: "3147484000"
    maxTimeCpu: 3000
    maxTimeReal: 1600
    maxTimeCron: 6000
    maxHttpTh: 8
  entrypoint:
    fixdbs: false
    fixdbsAdhoc: true
    # Dynamic Entrypoint
    repos: ""
    custom: ""
  # SMTP Config
  smtp:
    host: ""
    port: 0
    ssl: false
    user: ""
    pass: ""
    catchall: ""
    whiteList: "adhoc.nubeadhoc.com"
  extraEnvVars:
    # example: "yes"
    # example2: "no"


# Redis Config
redis:
  enabled: false
  host: ""
  pass: ""
  port: 6379

# Storage
storage:
  ir_attachment_location: "s3"
  aws_region: "US-EAST1"
  aws_host: "https://storage.googleapis.com"
  aws_bucketname: "acp-us-east1-test"
  aws_access_key_id: "keyId"
  aws_secret_access_key: "secret"

nodeTag: "Prod"

createPullSecret:
  enabled: false
  user: ""
  pass: ""
  registry: "https://index.docker.io/v2/"

adhoc:
  # standard, advance, premium
  serviceLevel: standard
  devMode: false
  # Type: test, train, backup, new, old
  appType: prod
  clientAnalyticAccount: "Unknown"

cloudNativePG:
  checkCRD: false
  enabled: false
  version: "15.0"
  resources:
    requests:
      cpu: 20m
      memory: 200Mi
    limits:
      cpu: 1000m
      memory: 5000Mi
  instances: 1
  persistence:
    size: 10Gi
    separateWAL: false
    # options are:
    # - gcp-ssd (to create )
    # - null (to let undefined)
    storageClass: gpc-ssd-r
  parameters:
    # shared_buffers: "1GB"
    # archive_mode = 'on'
    # dynamic_shared_memory_type = 'posix'
    # full_page_writes = 'on'
    # logging_collector = 'on'
    # log_destination = 'csvlog'
    # log_directory = '/controller/log'
    # log_filename = 'postgres'
    # log_rotation_age = '0'
    # log_rotation_size = '0'
    # log_truncate_on_rotation = 'false'
    # max_parallel_workers = '32'
    # max_replication_slots = '32'
    # max_worker_processes = '32'
    # shared_memory_type = 'mmap' # for PostgreSQL >= 12 only
    # wal_keep_size = '512MB' # for PostgreSQL >= 13 only
    # wal_keep_segments = '32' # for PostgreSQL <= 12 only
    # wal_level = 'logical'
    # wal_log_hints = 'on'
    # wal_sender_timeout = '5s'
    # wal_receiver_timeout = '5s'

  backup:
    schedule: "0 0 0 * * *" # Daily at UTC midnight
    volumeSnapshot:
      enabled: true
      volumeSnapshotClass: gcp-r # gcp
    bucket:
      enabled: false
      bucketName: ''
      bucketCredential: null
      backupServerName: null
  restore:
    fromBucket: null
    fromSnapshot: ""
    fromDump: ""
    inTimeRecovery: null # null for no recovery (initdb), latest for or timestamp (in the RFC3339 standard)

