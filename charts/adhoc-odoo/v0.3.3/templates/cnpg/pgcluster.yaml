{{- if .Values.cloudNativePG.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "adhoc-odoo.fullname" . }}-pg-app
  labels:
    {{- include "adhoc-odoo.labels" . | nindent 4 }}
type: kubernetes.io/basic-auth
data:
  username: {{ "odoo" | b64enc | quote }}
  password: {{ .Values.cloudNativePG.superUserPassword | b64enc | quote }}
---
{{- if or (ne .Values.adhoc.appType "prod") (gt (.Values.cloudNativePG.instances | default 1 | int ) 1) }}
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: {{ include "adhoc-odoo.fullname" . }}-pg-primary
  labels:
    {{- include "adhoc-odoo.labels" . | nindent 4 }}
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      cnpg.io/cluster: {{ include "cnpg.sanitizedPgName" . }}-pg
      cnpg.io/instanceRole: primary
---
{{- end }}
# kubectl explain --api-version=postgresql.cnpg.io/v1 Cluster.spec
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: {{ include "cnpg.sanitizedPgName" . }}-pg
  labels:
    app.kubernetes.io/name: {{ include "cnpg.sanitizedPgName" . }}-pg
    {{- include "adhoc-odoo.labels" . | nindent 4 }}
  annotations:
    cnpg.io/hibernation: "off"
    {{- /*
    # For manual intervention
    # cnpg.io/reconciliationLoop: "disabled"
    # cnpg.io/skipEmptyWalArchiveCheck: "enabled"
    # cnpg.io/force-backup-recovery: "true"
    */}}
{{- /*https://cloudnative-pg.io/documentation/1.22/cloudnative-pg.v1/#postgresql-cnpg-io-v1-ClusterSpec */}}
spec:
  {{- if eq .Values.adhoc.appType "prod" }}
  {{- /*
  # Name of the priority class which will be used in every generated Pod, if the PriorityClass specified does not exist, the pod will not be able to schedule. Please refer to https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/#priorityclass for more information
  */}}
  priorityClassName: prod-priority
  {{- end }}
  # Set to 0 enable the immediate fast shutdown (bypassing the smart shutdown process)
  smartShutdownTimeout: 0
  # The time in seconds that is allowed for a PostgreSQL instance to gracefully shutdown (default 1800) We chose 3 minutes maximum
  stopDelay: 180
  {{- /* The instances' log level, one of the following values: error, warning, info (default), debug, trace: */}}
  logLevel: info
  inheritedMetadata:
    labels:
      {{- include "adhoc-odoo.labels" . | nindent 6 }}
  imageName: "ghcr.io/cloudnative-pg/postgresql:{{ .Values.cloudNativePG.version | default "15.0" }}"
  primaryUpdateStrategy: unsupervised
  {{- if or (ne .Values.adhoc.appType "prod") (gt (.Values.cloudNativePG.instances | default 1 | int ) 1) }}
  enablePDB: false
  {{- end }}
  instances: {{ .Values.cloudNativePG.instances | default 1 }}
  affinity:
    {{- /* This configuration distributes instances across different hosts, minimizing disruptions in case of node failure. */}}
    enablePodAntiAffinity: true # Default value
    topologyKey: kubernetes.io/hostname # Default value
    podAntiAffinityType: preferred # Default value
    additionalPodAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: cnpg.io/podRole
                  operator: In
                  values:
                    - instance
            namespaceSelector:
              matchExpressions:
                - key: "kubernetes.io/metadata.name"
                  operator: Exists
            topologyKey: kubernetes.io/hostname
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: pg
                operator: DoesNotExist
  storage:
    size: {{ .Values.cloudNativePG.persistence.size }}Gi
    {{- if .Values.cloudNativePG.persistence.storageClass }}
    storageClass: {{ .Values.cloudNativePG.persistence.storageClass }}
    {{- end }}
  {{- /* Used to Separate WAL into a diferent volume */}}
  {{ if .Values.cloudNativePG.persistence.separateWAL }}
  walStorage:
    {{- /* TODO: This need to be calculated considerating retention and backups frequency */}}
    size: {{ .Values.cloudNativePG.persistence.size }}Gi
    {{- if .Values.cloudNativePG.persistence.storageClass }}
    storageClass: {{ .Values.cloudNativePG.persistence.storageClass }}
    {{- end }}
  {{- end }}
  resources:
    requests:
      memory: {{ .Values.cloudNativePG.resources.requests.memory | quote }}
      cpu: {{ .Values.cloudNativePG.resources.requests.cpu | quote }}
    limits:
      memory: {{ .Values.cloudNativePG.resources.limits.memory | quote }}
      cpu: {{ .Values.cloudNativePG.resources.limits.cpu | quote }}
  postgresql:
    shared_preload_libraries:
      - pg_stat_statements
      {{ if .Values.cloudNativePG.libraries.pgaudit }}
      - pgaudit
      {{- end }}
      {{ if .Values.cloudNativePG.libraries.autoExplain }}
      - auto_explain
      {{- end }}
    {{- /* https://cloudnative-pg.io/documentation/1.27/postgresql_conf/ */}}
    parameters:
      {{- /* pg stat statements */}}
      pg_stat_statements.max: "10000"
      pg_stat_statements.track: all
      {{- /* pg autovacuum */}}
      autovacuum_vacuum_scale_factor: "0.002"
      autovacuum_vacuum_threshold: "1000"
      autovacuum_analyze_threshold: "1000"
      autovacuum_analyze_scale_factor: "0.01"
      {{- /* pg dstatements https://postgresqlco.nf/doc/en/param/statement_timeout/ */}}
      statement_timeout: "1000000" # 1000 sec (~16 min)
      effective_io_concurrency: "200"
      random_page_cost: "1.1"
      wal_compression: "on"
      wal_buffers: "16MB"
      work_mem: "64MB"
      max_wal_size: "4GB"
      {{ if .Values.cloudNativePG.libraries.pgaudit }}
      # pgaudit
      pgaudit.log: "all, -misc"
      pgaudit.log_catalog: "off"
      pgaudit.log_parameter: "on"
      pgaudit.log_relation: "on"
      {{- end }}
      {{- if .Values.cloudNativePG.libraries.autoExplain }}
      # AutoExplain
      auto_explain.log_min_duration: "10s"
      # auto_explain.log_analyze: "on"
      # auto_explain.log_buffers: "on"
      # auto_explain.log_timing: "off"
      {{- end }}
      {{- /*
      # # Common
      # shared_buffers: "1GB"
      # archive_mode = 'on'
      # dynamic_shared_memory_type = 'posix'
      # full_page_writes = 'on'
      # logging_collector = 'on'
      # log_destination = 'csvlog'
      # log_directory = '/controller/log'
      # log_filename = 'postgres'
      # log_rotation_age = '0'
      # log_rotation_size = '0'
      # log_truncate_on_rotation = 'false'
      # max_parallel_workers = '32'
      # max_replication_slots = '32'
      # max_worker_processes = '32'
      # shared_memory_type = 'mmap' # for PostgreSQL >= 12 only
      # wal_keep_size = '512MB' # for PostgreSQL >= 13 only
      # wal_keep_segments = '32' # for PostgreSQL <= 12 only
      # wal_level = 'logical'
      # wal_log_hints = 'on'
      # wal_sender_timeout = '5s'
      # wal_receiver_timeout = '5s'
      */}}
      {{- range $key, $value := .Values.cloudNativePG.parameters }}
      {{ $key }}: {{ $value | quote }}
      {{- end }}
  {{- /* https://cloudnative-pg.io/documentation/1.27/cloudnative-pg.v1/#postgresql-cnpg-io-v1-BackupConfiguration */}}
  backup:
    {{- if .Values.cloudNativePG.backup.volumeSnapshot.enabled }}
    volumeSnapshot:
      {{- /* no ownership is set, meaning that VolumeSnapshot objects persist after the Backup and/or the Cluster resources are removed */}}
      snapshotOwnerReference: none
      annotations: {}
      labels:
        {{- include "adhoc-odoo.labels" . | nindent 8 }}
      {{- if .Values.cloudNativePG.backup.volumeSnapshot.volumeSnapshotClass }}
      className: {{ .Values.cloudNativePG.backup.volumeSnapshot.volumeSnapshotClass }}
      {{- end }}
      {{- /* Used to Separate WAL into a diferent volume */}}
      {{- if .Values.cloudNativePG.persistence.separateWAL }}
      {{- if .Values.cloudNativePG.backup.volumeSnapshot.volumeSnapshotClass }}
      walClassName: {{ .Values.cloudNativePG.backup.volumeSnapshot.volumeSnapshotClass }}
      {{- end }}
      {{- end }}
    {{- end }}
    target: prefer-standby

  {{- if .Values.cloudNativePG.restore.inTimeRecovery }}
  bootstrap:
    recovery:
      {{- if or .Values.cloudNativePG.restore.fromSnapshot .Values.cloudNativePG.restore.fromGCPSnapshot }}
      volumeSnapshots:
        storage:
          name: {{ .Values.cloudNativePG.restore.fromSnapshot | default (printf "%s-vs" ( include "cnpg.targetBkp" . )) }}
          kind: VolumeSnapshot
          apiGroup: snapshot.storage.k8s.io
      {{- /* Used to Separate WAL into a diferent volume */}}
      {{ if .Values.cloudNativePG.persistence.separateWAL }}
        walStorage:
          name: {{ .Values.cloudNativePG.restore.fromSnapshot }}-wal
          kind: VolumeSnapshot
          apiGroup: snapshot.storage.k8s.io
      {{- end }}
      {{- end }}
      {{- if ne .Values.cloudNativePG.restore.inTimeRecovery "latest" }}
      recoveryTarget:
        targetTime: {{ .Values.cloudNativePG.restore.inTimeRecovery | quote }}
      {{- end }}
  {{- end }}

  managed:
    services:
      {{- if .Values.cloudNativePG.services.disableReadOnly }}
      disabledDefaultServices: ["ro", "r"]
      {{- end }}
      additional:
      {{- if .Values.cloudNativePG.services.enableExternalRO }}
      {{- /*
      # Add specific load balancer to reach the database
      # https://cloudnative-pg.io/documentation/1.25/service_management/
      */}}
      - selectorType: ro
        serviceTemplate:
          spec:
            type: LoadBalancer
          metadata:
            name: {{ include "cnpg.sanitizedPgName" . }}-ro-lb
            labels:
              {{- include "adhoc-odoo.labels" . | nindent 14 }}
              exposed-service: "true"
            annotations:
              exposed-service: "true"
      {{- end }}
  {{- if not .Values.cloudNativePG.restore.inTimeRecovery }}
    roles:
    - name: odoo
      ensure: present
      comment: Odoo User
      login: true
      superuser: true
      passwordSecret:
        name: {{ include "adhoc-odoo.fullname" . }}-pg-app
  {{- end }}
{{- end }}
